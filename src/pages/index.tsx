import Head from "next/head";
import { Card, Container, Grid, Loading } from "@nextui-org/react";
import { Text } from "@nextui-org/react";
import SortFilter from "@/components/SortFilters";
import Header from "@/components/Header";
import List from "@/components/List";
import { useEffect, useState } from "react";
import { GetServerSideProps } from "next";

export const getServerSideProps: GetServerSideProps = async () => {
  const res = await fetch(`http://localhost:3000/api/getList`);
  const ListData = await res.json();

  return {
    props: {
      ListData,
    },
  };
};

export default function Home({ ListData }: any) {
  const [ListDataSorted, setListDataSorted] = useState<any[]>(ListData.data);

  const [SelectedSort, setSelectedSort] = useState<
    "Title" | "Date" | "Popularity"
  >("Title");

  const [SortType, setSortType] = useState<"Ascending" | "Descending">(
    "Ascending"
  );

  const [Search, setSearch] = useState<string>("");

  const [State, setState] = useState<"idal" | "sort">("sort");

  useEffect(() => {
    setListDataSorted(
      ListData.data.filter((value: any) =>
        value.name.toLowerCase().includes(Search.toLowerCase())
      )
    );
  }, [Search]);

  useEffect(() => {
    if (SelectedSort === "Title") {
      if (SortType === "Ascending")
        setListDataSorted(
          ListDataSorted.sort((a, b) => a.name.localeCompare(b.name))
        );
      else
        setListDataSorted(
          ListDataSorted.sort((a, b) => -a.name.localeCompare(b.name))
        );
    } else if (SelectedSort === "Popularity") {
      if (SortType === "Ascending")
        setListDataSorted(
          ListDataSorted.sort((a, b) => a.popularity - b.popularity)
        );
      else
        setListDataSorted(
          ListDataSorted.sort((a, b) => b.popularity - a.popularity)
        );
    } else {
      if (SortType === "Ascending")
        setListDataSorted(
          ListDataSorted.sort(
            (a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf()
          )
        );
      else
        setListDataSorted(
          ListDataSorted.sort(
            (a, b) => -new Date(b.date).valueOf() - new Date(a.date).valueOf()
          )
        );
    }
    setState("idal");
  }, [SelectedSort, SortType]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header Search={Search} setSearch={setSearch} />
      <Container>
        <Grid.Container gap={2}>
          <Grid xs={12} justify="center">
            <SortFilter
              SelectedSort={SelectedSort}
              setSelectedSort={setSelectedSort}
              SortType={SortType}
              setSortType={setSortType}
              setState={setState}
            />
          </Grid>

          <Grid xs={12} justify="center">
            {State === "idal" ? (
              <List ListData={ListDataSorted} />
            ) : (
              // <></>
              <Loading size="xl" color={"success"} />
            )}
          </Grid>
        </Grid.Container>
      </Container>
    </>
  );
}
